apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
apply from: '../unit_test_script.gradle'
apply from: '../comm.gradle'

android {
    dataBinding {
        enabled true
    }
    defaultConfig {
        applicationId "com.std.framework"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src-gen']
            aidl.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res', 'src/main/res/resource',
                           'src/main/res/main', 'src/main/res/explore',
                           'src/main/res/call', 'src/main/res/rich',
                           'src/main/res/chunyu']
            assets.srcDirs = ['assets']
        }
    }

    lintOptions {
        abortOnError false
    }
}


greendao {
    schemaVersion 1
    daoPackage 'table'
    targetGenDir 'src-gen'
}

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    implementation depend['STLibrary']
    implementation depend['cyrouterAnnotation']
    implementation depend['cyrouterApi']
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    implementation depend['rxandroid']
    implementation depend['rxjava']
    implementation depend['recyclerview']
    implementation depend['nineoldandroids']
    implementation depend['greendao']
    implementation depend['STCommon']
    implementation depend['multidex']
    annotationProcessor depend['cyrouterCompiler']
}

//import groovy.util.slurpersupport.GPathResult
//
//def readXml() {
//    File file = projects.project.file("src/main/AndroidManifest.xml")
//    GPathResult result = new XmlSlurper().parse(file)
//    def find = result.depthFirst().find {
//        it['@android:process'] == ":messager"
//    }
//    println(find['@android:name'])
//}




